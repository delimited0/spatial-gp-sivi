est <- 23 / 124
n <- 124
x <- 23
est <- x / n
p0 <- 0.07
se <- sqrt(p0*(1-p0) / n)
(est - p0) / se
n <- 124
x <- 23
est <- x / n
p0 <- 0.07
se <- sqrt(est*(1-est) / n)
(est - p0) / se
n <- 124
x <- 23
est <- x / n
p0 <- 0.07
se <- sqrt(p0*(1-p0) / n)
(est - p0) / se
n <- 124
x <- 23
est <- x / n
p0 <- 0.07
se <- sqrt(.5*(1-.5) / n)
(est - p0) / se
n <- 124
x <- 23
est <- x / n
p0 <- 0.07
se <- sqrt(.5*(1-.5) / n)
(est - .5) / se
n <- 124
x <- 23
est <- x / n
p0 <- 0.07
se <- sqrt(p0*(1-p0) / n)
(est - p0) / se
est <- .19
p0 <- 0.07
se <- sqrt(p0*(1-p0) / n)
(est - p0) / se
exam1_curve <- exam1 ^ .5
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .5
exam1
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .2
exam1
exam1_curve
exam2 <- c(14/15m 13/15)
exam2 <- c(14/15, 13/15)
exam2
(exam1 + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .1
(exam1_curve + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .1
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ 0
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .05
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .05
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .1
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
exam1 <- c(5/15, 12/15)
exam1_curve <- exam1 ^ .35
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
exam1 <- c(11/15, 12/15)
exam1_curve <- exam1 ^ .35
exam2 <- c(14/15, 13/15)
(exam1_curve + exam2) / 2
gc()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(data.table)
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100")
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = 20, main = "Waiting Times, n = 100")
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = 10, main = "Waiting Times, n = 100")
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100")
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
set.seed(1)
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat))
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat))
set.seed(1)
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat))
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat), col = "red", lwd = 2)
hist(waits, breaks = "FD", main = "MLE fit",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat), col = "red", lwd = 2)
points(1/3, 0, pch = 19)
hist(waits, breaks = "FD", main = "MLE fit",
probability = TRUE, lwd = 1.5)
samp <- runif(100, 0, 4)
hist(samp, xlab = "x", breaks = "FD")
x <- seq(-2, 2)
plot(x, x >= 0)
x <- seq(-2, 2, .01)
plot(x, x >= 0)
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "h")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2)
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = "1(x >= 0)")
expression("theta")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = "expression(1(x >= 0))")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = "expression(paste0(1, (x >= 0)))")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = expression(paste0(1, (x >= 0))))
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = expression(1(x >= 0))))
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = expression(1(x >= 0)))
max_x <- max(samp)
thetas <- seq(0, max_x + 4)
plot(thetas, 1/thetas)
max_x <- max(samp)
thetas <- seq(0, max_x + 4, .1)
plot(thetas, 1/thetas)
max_x <- max(samp)
thetas <- seq(0, max_x + 2, .1)
plot(thetas, 1/thetas)
max_x <- max(samp)
thetas <- seq(0, max_x + .1, .1)
plot(thetas, 1/thetas)
max(X)
setwd("~/TAMU/stat_677")
180 * .85
180 * .85 * .9
2 * 4950
install.packages("spbayes")
install.packages("spBayes")
set.seed(1)
library(spBayes)
n <- 100
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
install.packages("fields")
n <- 500
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
cov_func <- function(loc, p, sig) sig * exp(-fields::rdist(loc) / p)
cov_dist_func <- function(dists, p, sig) sig * exp(- dists / p)
set.seed(1)
n <- 200
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
X <- cbind(1, s)
coeff <- c(1, 1, 3)
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w + eps
tau2 <- 0.1
sigma2 <- 1
phi <- .3
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w + eps
# coeff <- c(1, 1, 3)
coef <- rep(0, 3)
X %*% coeff
# coeff <- c(1, 1, 3)
coef <- rep(0, 3)
X %*% coeff
X <- cbind(1, s)
coef
X[1,]
X[1,] %*% coef
X %*% coeff
coeff
# coeff <- c(1, 1, 3)
coef <- rep(0, 3)
X %*% coeff
coeff
# coeff <- c(1, 1, 3)
coeff <- rep(0, 3)
X %*% coeff
w
y <- X %*% coeff + w + eps
eps
# eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w #+ eps
y
train_n <- 100
train_idx <- sample(1:n, size = train_n, replace = FALSE)
test_idx <- setdiff(1:n, train_idx)
df <- data.frame(y = y[train_idx], lon = s[train_idx, 1], lat = s[train_idx, 2])
df
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .1, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(.1, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 1000, verbose = TRUE,
n.report = 100)
model_bayes$p.theta.samples
colnames(model_bayes$p.theta.samples)
model_bayes$p.theta.samples["phi"]
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
?spBayes::spLM
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .1, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(0, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 1000, verbose = TRUE,
n.report = 100)
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .1, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 1000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
tau2 <- 1
sigma2 <- 1
phi <- .3
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
# eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w #+ eps
train_n <- 100
train_idx <- sample(1:n, size = train_n, replace = FALSE)
test_idx <- setdiff(1:n, train_idx)
df <- data.frame(y = y[train_idx], lon = s[train_idx, 1], lat = s[train_idx, 2])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .1, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 1000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
model_rec$p.theta.samples
model_rec$p.theta.samples["phi"]
colnames(model_rec$p.theta.samples)
model_rec$p.theta.samples[,"phi"]
hist(model_rec$p.theta.samples[,"phi"])
tau2 <- 1
sigma2 <- 1
phi <- 2
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
# eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w #+ eps
n <- 100
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
X <- cbind(1, s)
# coeff <- c(1, 1, 3)
coeff <- rep(0, 3)
tau2 <- 1
sigma2 <- 1
phi <- 2
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
# eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w #+ eps
# train_n <- 100
# train_idx <- sample(1:n, size = train_n, replace = FALSE)
# test_idx <- setdiff(1:n, train_idx)
train_idx <- 1:100
df <- data.frame(y = y[train_idx], lon = s[train_idx, 1], lat = s[train_idx, 2])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .1, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 1000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
hist(model_rec$p.theta.samples[,"phi"])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .1, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
hist(model_rec$p.theta.samples[,"phi"])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = .05, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = 0, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
summary(model_rec$p.beta.recover.samples)
X <- cbind(1, s)
coeff <- c(1, 1, 3)
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
# eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w #+ eps
# train_n <- 100
# train_idx <- sample(1:n, size = train_n, replace = FALSE)
# test_idx <- setdiff(1:n, train_idx)
train_idx <- 1:100
# train_n <- 100
# train_idx <- sample(1:n, size = train_n, replace = FALSE)
# test_idx <- setdiff(1:n, train_idx)
train_idx <- 1:n
df <- data.frame(y = y[train_idx], lon = s[train_idx, 1], lat = s[train_idx, 2])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s[train_idx,],
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = 0, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 3), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 100)
model_rec <- spBayes::spRecover(model_bayes)
set.seed(1)
n <- 200
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
X <- cbind(1, s)
coeff <- c(1, 1, 3)
tau2 <- 1
sigma2 <- 1
phi <- 5
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w + eps
df <- data.frame(y = y, lon = s[, 1], lat = s[, 2])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s,
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = 0, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 10), "sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1)),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 1000)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
model_rec <- spBayes::spRecover(model_bayes)
set.seed(1)
n <- 200
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
X <- cbind(1, s)
coeff <- c(1, -5, 10)
tau2 <- 1
sigma2 <- 1
phi <- 5
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w + eps
df <- data.frame(y = y, lon = s[, 1], lat = s[, 2])
model_bayes <- spBayes::spLM(y ~ 1, data = df, coords = s,
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = 0, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 10),
"sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1),
"beta.norm" = list(mean = rep(0, 3),
cov = 5 * diag(3))),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 1000)
model_rec <- spBayes::spRecover(model_bayes)
model_bayes <- spBayes::spLM(y ~ ., data = df, coords = s,
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = 0, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 10),
"sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1),
"beta.norm" = list(mean = rep(0, 3),
cov = 5 * diag(3))),
cov.model = "exponential",
n.samples = 10000, verbose = TRUE,
n.report = 1000)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.theta.recover.samples)
summary(model_rec$p.beta.recover.samples)
setwd("~/TAMU/stat_677/project")
plot(model_rec$p.beta.recover.samples)
plot(model_rec$p.beta.recover.samples)
plot(model_rec$p.theta.recover.samples)
set.seed(1)
n <- 200
s <- matrix(runif(2*n, 0, 1), n, 2)
s_dists <- fields::rdist(s)
X <- cbind(1, s)
coeff <- c(1, -5, 10)
tau2 <- 1
sigma2 <- 1
phi <- 5
w <- MASS::mvrnorm(1, rep(0, n), cov_func(s, phi, sigma2))
eps <- MASS::mvrnorm(1, rep(0, n), tau2 * diag(n))
y <- X %*% coeff + w + eps
df <- data.frame(y = y, lon = s[, 1], lat = s[, 2])
model_bayes <- spBayes::spLM(y ~ ., data = df, coords = s,
starting = list("phi" = .5, "sigma.sq" = 1, "tau.sq" = .1),
tuning = list("phi" = .1, "sigma.sq" = 0, "tau.sq" = .05),
priors = list("phi.Unif" = c(.01, 10),
"sigma.sq.IG" = c(2, 1),
"tau.sq.IG" = c(2, 1),
"beta.norm" = list(mean = rep(0, 3),
cov = 5 * diag(3))),
cov.model = "exponential",
n.samples = 5000, verbose = TRUE,
n.report = 1000)
model_rec <- spBayes::spRecover(model_bayes)
summary(model_rec$p.beta.recover.samples)
plot(model_rec$p.beta.recover.samples)
plot(model_rec$p.theta.recover.samples)
plot(model_rec$p.beta.recover.samples)
summary(model_rec$p.theta.recover.samples)
summary(model_rec$p.beta.recover.samples)
model_rec$p.theta.samples
colnames(model_rec$p.theta.samples)
plot(tau.sq ~ phi.sq, data = model_rec$p.theta.samples)
plot(tau.sq ~ phi, data = model_rec$p.theta.samples)
cor(tau.sq ~ phi, data = model_rec$p.theta.samples)
with(data = model_rec$p.theta.samples, cor(tau.sq ~ phi))
with(data = model_rec$p.theta.samples, cor(tau.sq, phi))
with(model_rec$p.theta.samples, cor(tau.sq, phi))
cor(model_rec$p.theta.samples[, "tau.sq"])
cor(model_rec$p.theta.samples[, c("tau.sq", "phi")])
